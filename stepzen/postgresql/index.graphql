"""
Table 'comment' aliased as GQLName: 'Comment'
"""
type Comment {
	created_at: DateTime
	id: ID!
	post_id: ID
	text: String
	username: String
}

"""
Table: 'Post'
"""
type Post {
	body: String
	created_at: DateTime
	id: ID!
	image: String
	subreddit_id: ID
	title: String
	username: String
	subreddit: [Subreddit]
		@materializer(
			query: "getSubredditListById"
			arguments: [{ name: "post_id", field: "subreddit_id" }]
		)
	comment: [Comment]
		@materializer(
			query: "getCommentListById"
			arguments: [{ name: "post_id", field: "id" }]
		)
	vote: [Vote]
		@materializer(
			query: "getVoteListById"
			arguments: [{ name: "post_id", field: "id" }]
		)
}

"""
Table 'subreddit' aliased as GQLName: 'Subreddit'
"""
type Subreddit {
	created_at: DateTime
	id: ID!
	topic: String
}

"""
Table 'vote' aliased as GQLName: 'Vote'
"""
type Vote {
	created_at: DateTime
	id: ID!
	post_id: ID
	upvote: Boolean
	username: String
}

"""
The following queries are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Query {
	" Queries for type 'Comment' "
	getCommentList: [Comment]
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "comment"
			configuration: "postgresql_config"
		)
	getCommentListById(post_id: ID!): [Comment]
		@dbquery(
			type: "postgresql"
			query: """
			SELECT  * FROM "comment" where "post_id" = $1
			"""
			configuration: "postgresql_config"
		)
	getCommentPaginatedList(first: Int, after: Int): [Comment]
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			SELECT "created_at", "id", "post_id", "text", "username" FROM "comment" LIMIT $1 OFFSET $2
			"""
			configuration: "postgresql_config"
		)
	" Queries for type 'Post' "
	getPostBySubreddit_id(subreddit_id: ID!): [Post]
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "Post"
			configuration: "postgresql_config"
		)

	# query for individual post
	getPostById(id: ID!): Post
		@dbquery(
			type: "postgresql"
			query: """
			SELECT * FROM "Post"
			where id = $1
			"""
			configuration: "postgresql_config"
		)

	# query for [subreddit].tsx
	getPostBySubredditTopic(topic: String!): [Post]
		@dbquery(
			type: "postgresql"
			query: """
			SELECT * , "Post".id as id from "Post"
			join subreddit on subreddit.id = "Post".subreddit_id
			where subreddit.topic = $1
			order by "Post".created_at desc
			"""
			configuration: "postgresql_config"
		)

	getPostBySubreddit_idAndBody(subreddit_id: ID!, body: String!): [Post]
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "Post"
			configuration: "postgresql_config"
		)
	getPostList: [Post]
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "Post"
			configuration: "postgresql_config"
		)

	getPostListByOrder: [Post]
		@dbquery(
			type: "postgresql"
			query: """
			select * from "Post"
			order by "created_at" desc
			"""
			configuration: "postgresql_config"
		)

	getPostPaginatedList(first: Int, after: Int): [Post]
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			SELECT "body", "created_at", "id", "image", "subreddit_id", "title", "username" FROM "Post" LIMIT $1 OFFSET $2
			"""
			configuration: "postgresql_config"
		)
	" Queries for type 'Subreddit' "
	getSubredditList: [Subreddit]
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "subreddit"
			configuration: "postgresql_config"
		)

	getLatestSubreddit: [Subreddit]
		@dbquery(
			type: "postgresql"
			query: """
			select * from subreddit
			limit 10
			"""
			configuration: "postgresql_config"
		)

	getSubredditListById(post_id: ID!): [Subreddit]
		@dbquery(
			type: "postgresql"
			query: """
			SELECT  * FROM "subreddit" where "id" = $1
			"""
			configuration: "postgresql_config"
		)

	getSubreddiByTopic(topic: String!): [Subreddit]
		@dbquery(
			type: "postgresql"
			query: """
			select * FROM "subreddit"  where "topic" = $1
			"""
			configuration: "postgresql_config"
		)

	getSubredditPaginatedList(first: Int, after: Int): [Subreddit]
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			SELECT "created_at", "id", "topic" FROM "subreddit" LIMIT $1 OFFSET $2
			"""
			configuration: "postgresql_config"
		)
	" Queries for type 'Vote' "
	getVoteList: [Vote]
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "vote"
			configuration: "postgresql_config"
		)
	getVoteListById(post_id: ID!): [Vote]
		@dbquery(
			type: "postgresql"
			query: """
			SELECT * FROM "vote" where "post_id" = $1
			order by "created_at" desc
			"""
			configuration: "postgresql_config"
		)
	getVotePaginatedList(first: Int, after: Int): [Vote]
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			SELECT "created_at", "id", "post_id", "upvote", "username" FROM "vote" LIMIT $1 OFFSET $2
			"""
			configuration: "postgresql_config"
		)
}

"""
The following mutations are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Mutation {
	" Mutations for type 'Comment' "
	deleteComment(
		username: String!
		post_id: ID!
		text: String!
		id: ID!
		created_at: DateTime!
	): Comment
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "comment"
			dml: DELETE
			configuration: "postgresql_config"
		)
	insertComment(username: String, post_id: ID, text: String): Comment
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "comment"
			dml: INSERT
			configuration: "postgresql_config"
		)
	" Mutations for type 'Post' "
	deletePost(
		body: String!
		subreddit_id: ID!
		id: ID!
		created_at: DateTime!
		title: String!
		username: String!
		image: String!
	): Post
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "Post"
			dml: DELETE
			configuration: "postgresql_config"
		)
	insertPost(
		body: String
		subreddit_id: ID
		created_at: DateTime
		title: String
		username: String
		image: String
	): Post
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "Post"
			dml: INSERT
			configuration: "postgresql_config"
		)

	createPost(
		body: String
		subreddit_id: ID
		title: String
		username: String
		image: String
	): Post
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "Post"
			dml: INSERT
			configuration: "postgresql_config"
		)

	" Mutations for type 'Subreddit' "
	deleteSubreddit(topic: String!, created_at: DateTime!, id: ID!): Subreddit
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "subreddit"
			dml: DELETE
			configuration: "postgresql_config"
		)
	insertSubreddit(topic: String): Subreddit
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "subreddit"
			dml: INSERT
			configuration: "postgresql_config"
		)
	" Mutations for type 'Vote' "
	deleteVote(
		username: String!
		post_id: ID!
		id: ID!
		created_at: DateTime!
		upvote: Boolean!
	): Vote
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "vote"
			dml: DELETE
			configuration: "postgresql_config"
		)
	insertVote(
		username: String
		post_id: ID
		created_at: DateTime
		upvote: Boolean
	): Vote
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "vote"
			dml: INSERT
			configuration: "postgresql_config"
		)
	insertUpVote(username: String!, post_id: ID!, upvote: Boolean!): Vote
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "vote"
			dml: INSERT
			configuration: "postgresql_config"
		)
}
